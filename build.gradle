/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
	repositories {
		maven {
			url NEXUSDOWNLOADLOCATION
		}
	}
	dependencies {
		classpath  group: 'com.opencsv', name: 'opencsv', version: '4.0'
	}
}

import com.opencsv.CSVReader
import groovy.io.FileType
import groovy.json.*

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'


compileJava.options.encoding = 'UTF-8'

// In this section you declare where to find the dependencies of your project
repositories {
   	maven {
            url NEXUSDOWNLOADLOCATION
       }
}

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	compile group: 'com.esri', name: 'framework-utils', version: FRAMEWORKVERSION, changing: true
	compile group: 'org.json', name: 'json', version: 20160212
	compile group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '3.13.0'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.13.0'
}

test {

	prepareDynamicTestNGXML()

	systemProperty "grid.enabled", System.getProperty("grid.enabled")
	systemProperty "grid.url", System.getProperty("grid.url")
	systemProperty "cbt.enabled", System.getProperty("cbt.enabled")
	systemProperty "report.name", System.getProperty("report.name")
	systemProperty "report.dashboard.enabled", System.getProperty("report.dashboard.enabled")
	systemProperty "report.server", System.getProperty("report.server")
	systemProperty "report.folder", System.getProperty("report.folder")
	systemProperty "project.name", System.getProperty("project.name")
	systemProperty "test.environment", System.getProperty("test.environment")
	systemProperty "test.app", System.getProperty("test.app")
	systemProperty "appli.batchid", System.getProperty("appli.batchid")
	systemProperty "appli.batchname", System.getProperty("appli.batchname")
	systemProperty "screenshot.on.success", System.getProperty("screenshot.on.success")


	ignoreFailures = true
	useTestNG {
		useDefaultListeners = true
		println("testngxml$TESTNGXML")
        suites TESTNGXML
     }

	doLast {
		println 'This is executed last during the execution phase.'
		closeTestPlanRun()
	}
}

def prepareDynamicTestNGXML(){

	def testList = readFileToList(TESTCASELISTFILE)
	if(testList.size() > 0){
		def arr = getTestMetadata(testList)
		println("metadata$arr")
		def TestNGXML = getTestNGXML(arr,ENABLETPREPORT.toBoolean())
		println("testxml$TestNGXML")
		writeFile("TestNGDynamic.xml",TestNGXML)

		//set the dynamic TestNG file path
		TESTNGXML = "TestNGDynamic.xml"
	}
}

def getTestMetadata(List<String> Tests){

	//Get list of all test cases selected for execution
	println("Giventests$Tests")
	def listTests = Tests
	def listTestGroups = []

	//Group tests in groups of 10
	def strTemp = ""
	def intT = 1
	for(String t : listTests) {
		strTemp = "${strTemp}\"${t}\","

		if((intT % 10) ==0){
			listTestGroups.add(strTemp.toString().substring(0,strTemp.toString().length()-1))
			strTemp = ""
		}

		intT = intT+1
	}

	//add the remaining group
	if(strTemp.toString().length() > 0){
		listTestGroups.add(strTemp.toString().substring(0,strTemp.toString().length()-1))
	}
	println("Testgroups$listTestGroups")
	//
	def jsonSlurper = new JsonSlurper()
	def dataArray = jsonSlurper.parseText("[]")
	for (String tg : listTestGroups){
		def tpURL = "$TPBASEURL/api/v1/Projects/$TPPROJECTID/TestCases?where=(Name%20in%20(" + URLEncoder.encode((tg),"UTF-8") + "))&include=[Name,Tags]&take=25&format=json&access_token=$TPTOKEN"

		try {
			def client = new URL(tpURL).openConnection() as HttpURLConnection
			client.setRequestProperty("content-type","application/json")

			// execute
            if ( client.responseCode == 200 ) {
                // get the JSON response
                def artifactsJsonObject = client.inputStream.withCloseable { inStream ->
                    new JsonSlurper().parse(inStream as InputStream)
                }
				println("JsonResponse$artifactsJsonObject")
                dataArray += artifactsJsonObject.Items
            }

		} catch (Exception e) {
			println "There was a problem fetching the artifacts" + e
		}
	}

	//return all test data set
	return JsonOutput.toJson(dataArray)
}


def createTestPlanRun(TestPlanID){

	def tpURL = "$TPBASEURL/api/v1/TestPlanRuns?resultFormat=json&resultInclude=[Id,TestCaseRuns[Id,TestCase]]&access_token=$TPTOKEN"
	HashMap<String, String> dicTestCaseRuns = new HashMap<>()

	//Create test plan run
	try {
		def tpPost = new URL(tpURL).openConnection() as HttpURLConnection
		tpPost.setDoOutput(true)
        tpPost.setRequestMethod("POST")
		tpPost.setRequestProperty("content-type","application/json")
        tpPost.setRequestProperty("Accept", "application/json")
		String json = "{\"TestPlan\": {\"Id\": $TestPlanID}}"
        OutputStream op = tpPost.getOutputStream()
		op.write(json.getBytes())

		// get the JSON response
		def artifactsJsonObject = tpPost.inputStream.withCloseable { inStream -> new JsonSlurper().parse(inStream as InputStream)}
		p_TESTPLANRUN = artifactsJsonObject.Id

		println("testplanrunfromtp$artifactsJsonObject")
		def TestCaseRuns = artifactsJsonObject.TestCaseRuns.Items

		//iterate and get dictionary
		for(tcr in TestCaseRuns){
			dicTestCaseRuns.put(tcr.TestCase.Name.toString().toLowerCase().trim(),tcr.Id)
		}

	} catch (Exception e) {
		println "There was a problem fetching the artifacts" + e
	}

	//return all test data set
	//println(dicTestCaseRuns)
	return dicTestCaseRuns
}


def createTestDictionary(String DataFile){

	HashMap<String, String> dicTests = new HashMap<>()

	//Read data file from the tests
	List<String[]> rows = new CSVReader(new FileReader(new File("./$DataFile"))).readAll()
	println("Datafilerows\n$rows")
	def readRow = 0
	def testColumn = -1
	for (String[] columns : rows){

		//first row get the testname column number
		if(readRow==0){
			def colNum = 0
			for(String col : columns ){
				if(col.toLowerCase().trim() == "testcasename"){
					testColumn = colNum
					break
				}
				colNum++
			}
		}
		else{

			dicTests.put(columns[testColumn].toLowerCase().trim(),readRow.toString())
		}

		readRow++
	}
	println(dicTests)
	return dicTests
}


def getTestNGXML(tests, blnReporttp) {

	HashMap<String, HashMap<String,String>> dicTestsFiles = new HashMap<>()
	def TestCaseRuns = null

	def xmlTestNG = """<?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
    <suite name="{SuiteName}" preserve-order="true" parallel="tests" thread-count="4">
            {Tests}
    <listeners>
        <listener class-name="com.esri.qa.reporting.ExtentReporter" />
        <listener class-name="com.esri.qa.reporting.ReportListener" />
    </listeners>
    </suite>"""

	def xmlTest = """   <test name='{TestName}'>
        <parameter name="bType" value="{Browser}" />
        <parameter name="fileName" value="{DataFile}" />
        <parameter name="startRow" value="{StartRow}" />
        <parameter name="endRow" value="{EndRow}" />
        <parameter name="TestCaseRunID" value="{TestCaseRunID}" />
        <classes>
            <class name="{Class}" />
        </classes>
    </test>"""

	//if required to report to TargteProcess then create TestPlanRun
	def xmlTests = ""
	def jsonSlurper = new JsonSlurper()
	def testsCollection = jsonSlurper.parseText(tests)
	if(blnReporttp == true){
		def TestPlanName = SUITENAME + (new Date()).format("yyyyMMdd-HH")
		def TestPlanID = createTestPlan(TestPlanName,testsCollection)
		TestCaseRuns = createTestPlanRun(TestPlanID)
		println("Testcaseruns$TestCaseRuns")
	}

	//print dicTests
	//formulate the Tests for TestNG XML

	for(item in testsCollection){
		//Create dictionary object of tags
		println"ITem:$item"
		String[] Tags = item.Tags.split(",")
		HashMap<String,String> mapTags = new HashMap<>()
		for(String Tag : Tags){
			def val = Tag.split(":",2)
			mapTags.put(val[0].trim().toLowerCase(),val[1].trim())
		}

		//data file path
		String dataFile = "src/test/resources/data/${mapTags["tdata"]}"
		println(dataFile)

		if (!dicTestsFiles.containsKey(dataFile)){
			def dic = createTestDictionary(dataFile)
			dicTestsFiles.put(dataFile, dic)
			println "dic test:$dicTestsFiles"
		}


		String givenTest = dicTestsFiles[dataFile][item.Name.toLowerCase().trim().toString()]
		println "giventestno:$givenTest"
		def xmlT = xmlTest.replace("{StartRow}",givenTest)
		xmlT = xmlT.replace("{EndRow}",givenTest)
		xmlT = xmlT.replace("{Browser}",TESTBROWSER)
		xmlT = xmlT.replace("{DataFile}","${mapTags["tdata"]}" )
		xmlT = xmlT.replace("{Class}",mapTags["tclass"])
		xmlT = xmlT.replace("{TestName}",item.Name.toLowerCase().trim())
		if(blnReporttp){
			xmlT = xmlT.replace("{TestCaseRunID}",TestCaseRuns[item.Name.toLowerCase().trim()].toString())
		}
		else {
			xmlT = xmlT.replace("{TestCaseRunID}","")
		}
		xmlTests = xmlTests + '\n' + xmlT
	}

	xmlTestNG = xmlTestNG.replace("{SuiteName}",SUITENAME)
	xmlTestNG = xmlTestNG.replace("{Tests}",xmlTests)

	return xmlTestNG.toString()

}

def readFileToList(String filePath){
	def listTests = []
	if(new File(filePath).exists()) {
		new File( filePath ).eachLine { line ->
			listTests << line
		}
	}

	return listTests
}

def writeFile(String filePath, String content){
	new File(filePath).withWriter('utf-8') {
		writer -> writer.write(content)
	}
}

def findDataFile(String Dir, String FName) {
	def files = []
	def directory = new File(Dir)
	def closure = {File f -> if(f.name =~ /${FName}$/) {println f; files << f}; println(f.path) }
	directory.eachFileRecurse FileType.FILES, closure
	return files
}

def createTestPlan(String TestPlanName, TestIDs){

	def tpURL = "$TPBASEURL/api/v1/TestPlans?resultFormat=json&resultInclude=[Id]&access_token=$TPTOKEN"
	HashMap<String, String> dicTestCaseRuns = new HashMap<>()
	def TestPlanID = ""
	//Create test plan run
	try {
		def tpPost = new URL(tpURL).openConnection() as HttpURLConnection
		tpPost.setDoOutput(true)
		tpPost.setRequestMethod("POST")
		tpPost.setRequestProperty("content-type","application/json")
		tpPost.setRequestProperty("Accept", "application/json")
		String json = "{\"Name\": \"$TestPlanName\",\"Project\":{\"ID\":$TPPROJECTID}}"
		OutputStream op = tpPost.getOutputStream()
		op.write(json.getBytes())

		// get the JSON response
		def artifactsJsonObject = tpPost.inputStream.withCloseable { inStream -> new JsonSlurper().parse(inStream as InputStream)}

		println("testplanfromtp$artifactsJsonObject")
		TestPlanID = artifactsJsonObject.Id

	} catch (Exception e) {
		println "There was a problem creating Test Plan" + e
	}

	//Assign testcases to testplan
	for( te in TestIDs){
		assignTestCaseToPlan(TestPlanID,te.Id)
	}

	//return TestPlanID
	return TestPlanID
}

def assignTestCaseToPlan(TestPlanId, TestID){

	def tpURL = "$TPBASEURL/api/v1/TestCases/$TestID?resultFormat=json&resultInclude=[Id]&access_token=$TPTOKEN"
	HashMap<String, String> dicTestCaseRuns = new HashMap<>()
	def TestCaseID = ""

	//Create test plan run
	try {
		def tpPost = new URL(tpURL).openConnection() as HttpURLConnection
		tpPost.setDoOutput(true)
		tpPost.setRequestMethod("POST")
		tpPost.setRequestProperty("content-type","application/json")
		tpPost.setRequestProperty("Accept", "application/json")
		String json = "{\"TestPlans\":{\"Items\":[ {\"ID\":$TestPlanId}]}}"
		OutputStream op = tpPost.getOutputStream()
		op.write(json.getBytes())

		// get the JSON response
		def artifactsJsonObject = tpPost.inputStream.withCloseable { inStream -> new JsonSlurper().parse(inStream as InputStream)}

		println("testplanfromtp$artifactsJsonObject")
		TestCaseID = artifactsJsonObject.Id

	} catch (Exception e) {
		println "There was a problem assigning TestCase to  TestPlan" + e
	}

	//return all test data set
	//println(dicTestCaseRuns)
	return TestCaseID
}

def closeTestPlanRun(){

	if(p_TESTPLANRUN == null || p_TESTPLANRUN <= 0){
		return
	}

	def tpURL = "$TPBASEURL/api/v1/TestPlanRuns/$p_TESTPLANRUN?resultFormat=json&resultInclude=[Id]&access_token=$TPTOKEN"
	HashMap<String, String> dicTestCaseRuns = new HashMap<>()

	//Create test plan run
	try {
		def tpPost = new URL(tpURL).openConnection() as HttpURLConnection
		tpPost.setDoOutput(true)
		tpPost.setRequestMethod("POST")
		tpPost.setRequestProperty("content-type","application/json")
		tpPost.setRequestProperty("Accept", "application/json")
		String json = "{\"EntityState\": {\"ID\": 171, \"Name\": \"Done\"}}"
		OutputStream op = tpPost.getOutputStream()
		op.write(json.getBytes())

		// get the JSON response
		def artifactsJsonObject = tpPost.inputStream.withCloseable { inStream -> new JsonSlurper().parse(inStream as InputStream)}
		println("testplanfromtp$artifactsJsonObject")

	} catch (Exception e) {
		println "There was a problem closing Test Plan run" + e
	}
}
